--DAY 3 PRACTICE
--AGGREGATE FUNCTIONS
select sum(amount) from payment; --except count all other aggregate functions need column name

--we cannot use another column not aggregated while aggeegating a column. It is only possible if we group our data
-- SELECT SUM(amount),payment_id
-- from payment;

select sum(amount),count(*),avg(amount) --multiple aggregate functions are supported
from payment;

--ROUND FUNCTION IS USED TO ROUND DECIMAL VALUES UPTO SPECIFIC DECIMAL POINTS
SELECT COUNT(*),
ROUND(AVG(AMOUNT),2) AS AVERAGE--THE 2ND ARG OF ROUND FUNC IS NO OF  DECIMAL POINTS TO BE DISPALYED
FROM PAYMENT;

--AGGREGATE FUNC CHALLENGE
SELECT MIN(replacement_cost),
MAX(replacement_cost),
ROUND(AVG(replacement_cost),2) AS AVERAGE,
SUM(replacement_cost)
FROM FILM

--GROUP BY IS USED FOR GOUPING DDATA BASED ON A COLUMN NAME 
SELECT CUSTOMER_ID,SUM(AMOUNT)
FROM PAYMENT
WHERE CUSTOMER_ID>3
GROUP BY CUSTOMER_ID--GROUP BY COMES AFTER WHERE AND BEFORE ORDER BY
ORDER BY CUSTOMER_ID
--NOTE: ANY COLUMN NAME USED IN GROUPBY FUNC MUST BE EITHER IN THE AGGREGATE FUNC OR IF IT IS NOT IN AGGEREGATE FUNC
--THEN IT MUST BE IN GROUP BY.EG: CUSTOMER_ID IS NOT IN AGGREG FUNC SO IT IS INCLUDED IN GROUPBY

SELECT CUSTOMER_ID,SUM(AMOUNT)
FROM PAYMENT
GROUP BY CUSTOMER_ID
ORDER BY SUM(AMOUNT) DESC --ORDERS THE LIST WITH MAX TO MIN AMOUNT SPENT

--GROUP BY CHALLENGE
--Which of the two is responsible for a higher overall payment
-- amount?
SELECT STAFF_ID,COUNT(*),SUM(AMOUNT)
FROM PAYMENT
GROUP BY STAFF_ID
ORDER BY SUM(AMOUNT) DESC;

-- How do these amounts change if we don't consider amounts
-- equal to 0?
SELECT STAFF_ID,COUNT(*),SUM(AMOUNT)
FROM PAYMENT
WHERE AMOUNT>0
GROUP BY STAFF_ID
ORDER BY SUM(AMOUNT) DESC;

--GROUP BY MULTIPLE COLUMNS
SELECT STAFF_ID,CUSTOMER_ID,SUM(AMOUNT),COUNT(*)
FROM PAYMENT
GROUP BY STAFF_ID,CUSTOMER_ID
ORDER BY COUNT(*) DESC

--DATE FUNC IS USED EXTRACT DATE FROM A GIVEN DATE
SELECT DATE(PAYMENT_DATE)
FROM PAYMENT;

--GROUP BY MULTIPLE COLUMN CHALLENGE
-- Which employee had the highest sales amount in a single day?
SELECT STAFF_ID,DATE(PAYMENT_DATE),SUM(AMOUNT),COUNT(*)
FROM PAYMENT
GROUP BY STAFF_ID,DATE(PAYMENT_DATE)
ORDER BY SUM(AMOUNT) DESC

-- Which employee had the most sales in a single day (not
-- counting payments with amount = 0?
SELECT STAFF_ID,DATE(PAYMENT_DATE),SUM(AMOUNT),COUNT(*)
FROM PAYMENT
WHERE AMOUNT>0
GROUP BY STAFF_ID,DATE(PAYMENT_DATE)
ORDER BY COUNT(*) DESC

--HAVING CLAUSE IS USED FOR FILTERING LIKE 'WHERE' BUT USED ONLY ON AGGREG FUNC AND USED ONLY IN GROUP BY FUNC
SELECT CUSTOMER_ID,SUM(AMOUNT)
FROM PAYMENT
GROUP BY CUSTOMER_ID
HAVING SUM(AMOUNT)>200

SELECT STAFF_ID,DATE(PAYMENT_DATE),SUM(AMOUNT),COUNT(*)
FROM PAYMENT
WHERE AMOUNT!=0
GROUP BY STAFF_ID,DATE(PAYMENT_DATE)
HAVING COUNT(*)>400 --SHOULD BE USED IMMEDIATELY AFTER GROUP BY
ORDER BY COUNT(*) DESC


SELECT STAFF_ID,DATE(PAYMENT_DATE),SUM(AMOUNT),COUNT(*)
FROM PAYMENT
WHERE AMOUNT!=0
GROUP BY STAFF_ID,DATE(PAYMENT_DATE)
HAVING COUNT(*)=10 OR COUNT(*)=17--SHOULD BE USED IMMEDIATELY AFTER GROUP BY
ORDER BY COUNT(*) DESC

--HAVING CHALLENGE
-- In 2020, April 28, 29 and 30 were days with very high revenue.
-- That's why we want to focus in this task only on these days
-- (filter accordingly).
-- Find out what is the average payment amount grouped by
-- customer and day â€“ consider only the days/customers with
-- more than 1 payment (per customer and day).
-- Order by the average amount in a descending order. 
SELECT ROUND(AVG(AMOUNT),2),CUSTOMER_ID,DATE(PAYMENT_DATE),COUNT(*)
FROM PAYMENT
WHERE DATE(PAYMENT_DATE) IN ('2020-04-28','2020-04-29','2020-04-30')
GROUP BY CUSTOMER_ID,DATE(PAYMENT_DATE)
HAVING COUNT(*)>=1
ORDER BY 1 DESC
